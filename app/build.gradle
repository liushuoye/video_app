plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdk 31
    buildFeatures {
        // DataBinding 使用声明性格式将布局中的界面组件绑定到应用中的数据源。
        // 如果你打算在 Kotlin 项目中使用数据绑定，你应该应用 kotlin-kapt 插件。
        dataBinding true
    }
    defaultConfig {
        applicationId "com.shuoye.video"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        // work-runtime-ktx 2.1.0 及更高版本现在需要 Java 8
        jvmTarget = "1.8"

        // 启用协程和流 API
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }
    packagingOptions {
        // 多重依赖将这些文件引入。排除它们以启用
        // 我们要构建的测试 APK（对我们的 AAR 没有影响）
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    /////////////////////////////////////////////////////////////////////////////////////////////
    ///网络请求框架 Retrofit2 + Okhttp3
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // ConverterFactory的Gson依赖包
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // 日志过滤器
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'
    // Fastjson 是一个用 Java 编写的 JSON 处理器（JSON 解析器 + JSON 生成器）
    implementation 'com.alibaba:fastjson:1.2.78'
    // Java 标量值类型的改造转换器。
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    /////////////////////////////////////////////////////////////////////////////////////////////
    def paging_version = "3.0.1"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    // 或者 - 没有用于测试的 Android 依赖项
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"
    // 可选 - RxJava2 支持
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version"
    // 可选 - RxJava3 支持
    implementation "androidx.paging:paging-rxjava3:$paging_version"
    // 可选 - Guava ListenableFuture 支持
    implementation "androidx.paging:paging-guava:$paging_version"

    /////////////////////////////////////////////////////////////////////////////////////////////
    ///Room 持久性库
    def roomVersion = "2.3.0"
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    // 使用 Kotlin 注释处理工具 (kapt)
    kapt "androidx.room:room-compiler:$roomVersion"
    // 可选 - 对 Room 的 Kotlin 扩展和协程支持
    implementation "androidx.room:room-ktx:$roomVersion"
    // 可选 - Room 的 RxJava2 支持
    implementation "androidx.room:room-rxjava2:$roomVersion"
    // 可选 - Room 的 RxJava3 支持
    implementation "androidx.room:room-rxjava3:$roomVersion"
    // 可选 - 对 Room 的 Guava 支持，包括 Optional 和 ListenableFuture
    implementation "androidx.room:room-guava:$roomVersion"
    //可选 - 测试助手
    testImplementation "androidx.room:room-testing:$roomVersion"

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Navigation 组件
    def nav_version = "2.3.5"
//    implementation 'androidx.navigation:navigation-fragment:2.3.5'
//    implementation 'androidx.navigation:navigation-ui:2.3.5'
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // 功能模块支持
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    // 测试导航
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    // Jetpack Compose 集成
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha10"

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// lifecycle
    def lifecycle_version = "2.4.0-rc01"
    def arch_version = "2.1.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // 仅生命周期（没有 ViewModel 或 LiveData）
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // 为 ViewModel 保存状态模块
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // 注释处理器
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // 可选 - 在服务中实现 LifecycleOwner 的助手
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // 可选 - ProcessLifecycleOwner 为整个应用程序进程提供生命周期
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // 可选 - 对 LiveData 的 ReactiveStreams 支持
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // 可选 - LiveData 的测试助手
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.38.1"
    ///使用 Hilt 注入 ViewModel 对象
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03'
    // 使用 Kotlin 时。
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    // 使用 Java 时。
    annotationProcessor 'androidx.hilt:hilt-compiler:1.0.0'
    ///使用 Hilt 注入 WorkManager
    implementation 'androidx.hilt:hilt-work:1.0.0'
    // 使用 Kotlin 时。
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    // 使用 Java 时。
    annotationProcessor 'androidx.hilt:hilt-compiler:1.0.0'

    kapt "com.github.bumptech.glide:compiler:4.10.0"
    // Fragment KTX 模块提供了一系列扩展程序以简化 Fragment API。
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.work:work-runtime-ktx:2.7.0"
    implementation "com.github.bumptech.glide:glide:3.7.0"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"


//    // 测试依赖
//    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
//    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
//    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
//    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"
//    androidTestImplementation "com.google.truth:truth:$rootProject.truthVersion"
//    androidTestImplementation "com.google.dagger:hilt-android-testing:$rootProject.hiltVersion"
//    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"


//    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
//    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hiltVersion"
//    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
//    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
//    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
//    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
//    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
//    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
//    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
//    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
//    implementation "androidx.paging:paging-runtime-ktx:$rootProject.pagingVersion"
//    implementation "androidx.viewpager2:viewpager2:$rootProject.viewPagerVersion"
//    implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"
//    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
//    implementation "com.google.android.material:material:$rootProject.materialVersion"
//    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
//    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpLoggingVersion"
//    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
//    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"
//    implementation "com.google.dagger:hilt-android:$rootProject.hiltVersion"
}